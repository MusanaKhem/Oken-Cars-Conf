-------------------------|
--- VM -- SONARQUBE -----|
-------------------------|

Name =  sonarqubeserver011
hostname = prod-sonarqube-011
username = prodsonarqube
userpassword = oken242
ip = 10.10.10.20


-------------------------------------------------|
--- SONARQUBE VM SETTING USING SHELL COMMANDS ---|
-------------------------------------------------|
-------------------------------------------------------------------------------------------
1) Connection distante en ssh à la VM Sonarqube en copiant la clé ssh de Jenkins -- DONE --
-------------------------------------------------------------------------------------------
-> From Jenkins server
-> ssh-copy-id -f .ssg/id_rsa.pub prodsonarqube@10.10.10.20
-> Connect in ssh mode to "prod-sonarqube-011" VM
-> ssh -i  @'vm.ip.address'
-> ssh -i prodsonarqube@10.10.10.20
-> Yes to accept key fingerprint SHA56:....


-----------------------------------------------------
2) Into Sonarqube machine, change hostname -- DONE --
-----------------------------------------------------
-> sudo hostnamectl set-hostname prodsonarqube
-> /bin/bash


---------------------------------------------------------------------
3) Into Sonarqube machine, Update and Upgrade the registry -- DONE --
---------------------------------------------------------------------
-> sudo apt update
-> sudo apt upgrade


--------------------------
4) Install Java -- DONE --
--------------------------
-> sudoapt-get install default-jdk -y
-> sudo apt install openjdk-17-jre -y


-------------------------------------
5) Go to Sonarqube website -- DONE --
-------------------------------------
-> Click on icon menu ; select "Download"
-> Select "Community Edition" "Download for free" button
-> Mouse's right click
-> Copy the download link
-> https://www.sonarsource.com/products/sonarqube/downloads/success-download-community-edition/


------------------------------------------
6) In the Sonarqube VM terminal -- DONE --
------------------------------------------
-> wget https://www.sonarsource.com/products/sonarqube/downloads/success-download-community-edition/
https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-10.2.1.78527.zip


-------------------------------------------
7) See the zip folder downloaded -- DONE --
-------------------------------------------
-> ls


---------------------------------------
8) Install Unzip the folder -- DONE --
---------------------------------------
-> sudo apt install unzip


-------------------------------
9) Unzip the folder -- DONE --
-------------------------------
-> unzip 'folder name'


-------------------------------------
10) See the folder unziped -- DONE --
-------------------------------------
-> ls


--------------------------------------------------------------------------
11) Go to the unziped sonarqube folder and go to the bin folder -- DONE --
--------------------------------------------------------------------------
-> cd 'sonarqube folder name'/bin/


------------------------------------------------------------
12) You can see 3 folders (Linux, MacOS, Windows) -- DONE --
------------------------------------------------------------
-> Cause we are using Linux
-> Select Linux folder
-> cd linux-x86-64
-> You can see a shell 'sh' script named "sonar.sh"
-> Execute the script with specific parameters { console | start | stop | force-stop | restart | status | dump }
-> In our case we want to use sonarqube console
-> ./sonar.sh console

OR ENTER THAT COMMAND

-> sh sonarqube-10.2.1.78527/bin/linux-x86-64/sonar.sh console


-------------------------------------------------------------------------------
13) On the firewall of our machine |and|or| the firewall of our LAN -- DONE --
-------------------------------------------------------------------------------
-> Not necessary in our case ; cause of we use pfsense
-> Add inbound rules
-> Custom TCP (type) ; TCP (protocol) ; 3011 (port range) ; Anywhere 0.0.0.0/0 (source) ; SonarQube-rule (description)


------------------------------------------------------
14) Using Sonarqube Web Interface / Console -- DONE --
------------------------------------------------------
-> Copy the machine IP address
-> "10.10.10.20"
-> In your browser open a new windows
-> the copied IP address and add the port to the web request
----> http://10.10.10.20:9000/sonar
-> Press "ENTER" on your keyboard to lunch the web request
-> As you can see Sonarqube Console is loading


------------------------------------------------------
15) Connect to Sonarqube for the first time -- DONE --
------------------------------------------------------
-> default username : "admin"
-> default password : "admin"


-----------------------------------
16) Update your password -- DONE --
-----------------------------------
-> Old password
-> "admin"
-> New password
-> "oken242"
-> Confirm password
-> "oken242"
-> Do not save your new password in the browser
-> Save your new password in Keepass or other password manager


-----------------------------------------------
17) Select a type of projet to start -- DONE --
-----------------------------------------------
-> See, select and click on the "Create a project Manually" box (with '<>' symbol/icon)
-> This will allow you to create AND test a new project


---------------------------------------
18) Section Create a project -- DONE --
---------------------------------------
-> Complete Project display name
-> "oken-cars"
-> Complete Project key (it seems to be exactly the same name as Project display one)
-> "oken-cars"
-> Indicate Main branch name to execute Sonarqube services
-> "develop"
-> In my case, I tried develop to make a test on development condition
-> Click on "Set Up" button
-> 
-> Set up project for Clean as You Code
-> Choose the case which is used for your project
-> In our case we choose "Reference branch"
-> Click on "Create project" button
-> On Menu at the top of page, click on "Project"
-> Click on "oken-cars"
-> Click on "Project Settings"
-> Select "Quality Profiles"


-----------------------------------------------------------------
19) In Prod-Docker-Compose-011-Scan's Project Overview -- DONE --
-----------------------------------------------------------------
-> It is asked us to choose the Tutorial Service
FIRST QUESTION -> How do you want to analyze your repository ?
-> No need to answer. This is an introducing question.
SECOND QUESTION -> Do you want to integrate with your favorite CI ? Choose one of the following tutorials.
-> Select "With Jenkins" box
THID QUESTION -> Are you testing or have an advanced use-case ?
-> No need to select the box
ANALYSE YOUR PROJECT WITH JENKINS
> Select your DevOps platform
-> Clik on "GitLab" button
>Prerequisites
-> Then click on "Configure Analysis"
>Create a Pipeline Job
-> Create a Pipeline Job  (to automatically analyze our project)
-> See the main steps if you want to learn more
-> Click on "Continue" button
>Create a GitLab Webhook
-> See how to add a webhook if you want to learn more
-> Click on "Continue" button
>Create a Jenkinsfile
-> Click on "Maven" |or| "Other (for JS, TS, Go, Python, PHP, ...)" button project type
-> In our cas, we choose "Other (for JS, ...)" option (later we will create a scan for Maven project code)
-> Copy the first text "sonar.projectKey=Prod-Docker-Compose-011-Scan" -- that is the 'project key'
-> Create a "sonar-project.properties" file and paste the sonar.projectKey
-> Copy the Jenkinsfile text and add it in your Jenkinsfile or Jenkinsfile.groovy
-> In our case, we modify our Jenkinsfile.groovy with the bellow sentences code :
START
...
Save and Exit


------------------------------------------------
20) ADD FOLLOWING LINES IN Jenkinsfile.groovy --
------------------------------------------------
node{
    cleanWs()
    agent any
    tools{
        maven 'mvn'
    }
    try{
        stage('Checkout'){
        checkout scmGit(branches: [[name: '*/develop']], extensions: [], userRemoteConfigs: [[url: 'http://10.10.10.212:2222/oken-consulting/oken-cars-web/spring.git']])
                sh 'cd spring/'
                sh 'mvn clean install -DskipTests'
        }
        stage('SonarQube Analysis'){
            def scannerHome = tool 'SonarScanOkenCars';
            withSonarQubeEnv(){
                sh "${scannerHome}/bin/sonar-scanner"
            }
        }
        notify('successful')
     } catch(err) {
         notify("error caught : '${err}'")
     }
     finally{
         cleanWs()
     }
}

>You're all set!
>Configuration of our job is finished 
-> Go out by clicking on Dashboard icon
> Let's wait few seconds cause Sonarqube Console is making the first analysis


---------------------------------------------------------------------
21) IN THE PROJECT home code folde -> SET sonar properties ----------
---------------------------------------------------------------------
==> Create a file named = "sonar-project.properties
-----------------------------------
sonar-project.properties ----------
-----------------------------------
sonar.projectKey=oken-cars
sonar.projectName=oken-cars
sonar.projectVersion=1.0
sonar.sources=angular/src/app
sonar.language=java
sonar.java.binaries=/var/lib/jenkins/workspace/oken-cars-test/target/classes
sonar.exclusions=/spring/src/test/java/com/oken/cars/okencars/*.java


------------------------------------------
22) At the top left of the page -- DONE --
------------------------------------------
-> Click on "Admin Account icon" --> "My account"
-> Click on "Security"
>Generate Tokens
-> Name = OkenCars01-Token
-> Type = Project Analysis Token
-> Expires in = No expiration

-> Click on "Generate"
-> Copy the sqa token numbers "sqa_xxxxxxxxxxxxxxx..."
-> Paste it in an other blank file = "cf.keepass"
------------------------
----sonarqube token-----
------------------------
oken-cars Token = sqp_46606a2b2548f60f6961c7001914d79c4b2f3fbb


---------------------------
23) IN SONARQUBE PROJECT -- 
---------------------------
-> Select and clik on the project "oken-cars"
-> Go to project settings
-> Select "Project settings"
-> Select and Click on "Quality Profiles" button
-> Click on "Add language" button
a) Select "CSS" language && select "Sonar way" as a specific Quality Profile
b) Select "HTML" language && select "Sonar way" as a specific Quality Profile
c) Select "Java" language && select "Sonar way" as a specific Quality Profile
d) Select "JavaScript" language && select "Sonar way" as a specific Quality Profile
e) Select "TypeScript" language && select "Sonar way" as a specific Quality Profile
-> Apply and Save settings


---------------------------
24) IN SONARQUBE PROJECT --
---------------------------
-> Go to project settings
-> Select "Project settings"
-> Select and Click on "Quality Gate" button
-> Select "Always use a specific Quality Gate" => "Sonar way"
-> Click on "Save" button



-------------------------------------------------------------------
25) On Jenkins Dashboard -- To install SonarQube Scanner -- DONE --
-------------------------------------------------------------------
-> Click on "Manage Jenkins"
-> Click on "Manage Plugins"
-> Click on "Available Plugins"
-> Search "SonarQube Scanner" plugin
-> Check "SonarQube Scanner" box
-> Click on "Install without restart"


------------------------------------
26) on jenkins - configure system --
------------------------------------
SonarQube Server
	-> Name = SonarQube-Server-Oken-Cars
	-> Server URL = 10.10.10.31
	-> Server authentication token
		* Click on "Add Jenkins"
		* Domain = Global credentials (unrestricted)
		* Kind = Secret text 
		* Scope = Global (Jenkins, nodes, ...)
		* Secret -generate on sonarqube web interface security - generate token)
				= paste "sqp_46606a2b2548f60f6961c7001914d79c4b2f3fbb"
		* ID = Oken-cars-01-Sonar-Scan-Token-Credential
		* Description = OkenCars SonarQube Token for Sonar Scan
	-> Click on "Add"


------------------------
27) Configure Tools : --
------------------------
	-> JDK installations (use VM terminal)
		* Name = java-17.0.8.1
		* JAVA_HOME =/usr/lib/jvm/java-17-openjdk-amd64/

	-> Maven installations (use VM terminal)
		* Name = mvn
		* MAVEN_HOME = /opt/mvn
	
	-> Docker installations
		* Name = docker 24.0.6
		* Installation root = /usr/bin/docker

Click on "Apply" and "Save"


-------------------------
28) Configure System : --
-------------------------
	-> Global properties
		* Environment variables
			* Name = PATH
			* Value = $PATH:/opt/mvn/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin::/home/oken:/bin:/usr/lib/jvm/java-1.17.0-openjdk-amd64:/opt/mvn:/opt/mvn/bin

	-> Add 1st Server GROUPS : 
		* Groupe Name = Ubuntu Server Oken Cars
		* SSH Port = 22
		* User Name = oken
		* Password = oken241$
		
	-> Add 1st Server GROUPS : 
		* Groupe Name = Debian Server Oken Cars
		* SSH Port = 22
		* User Name = oken
		* Password = oken241$
		
	-> Add Server List FOR Ubuntu Server Oken Cars
		* Server Group = Ubuntu Server Oken Cars
		* Server Name = dockerserver
		* Server IP = 10.10.10.31

	-> Add Server List FOR Debian Server Oken Cars
		* Server Group = Debian Server Oken Cars
		* Server Name = DockerServer
		* Server IP = 10.10.10.30
Click on "Apply" and "Save"


--------------------------------
29) VERIFY JOB CONFIGURATION
--------------------------------
---------------------------------------------------
7) Return to "Maven Project" -> "oken-cars-web" :
---------------------------------------------------
	-> Configure job
		* Enter a description about this job
		* Scroll down to "Source Code Management"
			-> Git
			-> Repository URL = http://10.10.10.212/oken-consulting/oken-cars-web.git
			-> Credentials = "only username credentials works"
		* Branch Specifier (blank for 'any' = */develop
		* Repository browser = (Auto)
		* Additional Behaviours
			-> Add -> Clean befor checkout
			-> Add -> Clean after checkout
		* Build Triggers
		* Build Environment

	-> Scroll to "Build Steps"
	-> Click on "Add build step"
	-> Select "Execute SonarQube Scanner"
		--> Section SonarQube Installation 
		--> Select "SonarQube-Server-Oken-Cars"
		--> Scroll to "JDK" version setup in selectiong "java-17.0.8.1"
		--> Select SonarQube Scanner "SonarScanOkenCars"
        --> Verify that "Path to project properties" is set = "sonar-project-server1.properties"
		--> Verify that "Analysis properties" are correctly added
		"
		sonar.projectKey=oken-cars-server1
		sonar.projectName=oken-cars-server1
		sonar.projectVersion=1.0
		sonar.sources=angular/src/app
		sonar.language=java
		sonar.java.binaries=/var/lib/jenkins/workspace/oken-cars/target-test/classes
		sonar.exclusions=/spring/src/test/java/com/oken/cars/okencars/*.java
		"
		--> Verify the "-X" line is put on "Additional arguments" section
		--> Apply and Save

-> Run the job by clicking on "Build now" button
-> Create project for oken@dockerserver2 and oken@dockerserver3



****SONARQUBE SERVER****


**SERVER 1**
-> Project : oken-cars-server1 ; deploy on dockerserver ; 10.10.10.31
Name = okenCars01-Token
Type = Project Analysis Token
Project = oken-cars-server1
Project = oken-cars-server1
Expires in = No expiration
Generate
ProjectKey = sqp_2b97e264756b357252f2eedaa0e076f9d2c4cb7c



**SERVER 2**
-> Generate Tokens for each project
-> Project : oken-cars-server2 ; deploy on dockerserver2 ; 10.10.10.33
Name = okenCars02-Token
Type = Project Analysis Token
Project = oken-cars-server2
Project = oken-cars-server2
Expires in = No expiration
Generate
ProjectKey = sqp_73fefc4b0c90484cba81d04a91e8815f16923f32



**SERVER 3**
-> Project : oken-cars-server3 ; deploy on dockerserver3 ; 10.10.10.32
Name = okenCar03-Token
Type = Project Analysis Token
Project = oken-cars-server3
Project = oken-cars-server3
Expires in = No expiration
Generate
ProjectKey = sqp_a7c3861b5a8b40d4dc7463b82c61c7b5afb4e8b8



**SERVER4**
-> Project : oken-cars-server4 ; deploy on dockerserver3 ; 10.10.10.29
Name = okenCars-04-Token
Type = Project Analysis Token
Project = oken-cars-server4
Project = oken-cars-server4
Expires in = No expiration
Generate
ProjectKey = sqp_ed45b1474c7d1c0bb58f1348c69162690c229235



**OTHER FOR JENKINSFILE-SERVER4.GROOVY**
Name = okenCarsMulti04
Token = sqa_4bd7f4b4eeb59e0c60342bad486fd837529d3dc0
ProjectKey = sqa_4bd7f4b4eeb59e0c60342bad486fd837529d3dc0



        stage('SonarQube Analysis') {
            steps{
                sh '''cd spring/ && mvn -DskipTests sonar:sonar -Dsonar.projectKey=oken-cars-web-server3-bis -Dsonar.projectName='oken-cars-web-server3-bis' -Dsonar.login=sqp_a2fddaf02fb3b61625770049704d123b89634c48
                   -Dsonar.sources=angular/src/app
                   -Dsonar.language=java
                   -Dsonar.java.binaries=sonar.java.binaries=/var/lib/jenkins/workspace/oken-cars-test/target/classes
                   -Dsonar.exclusions=/spring/src/test/java/com/oken/cars/okencars/*.java
                   '''
            }
        }
		
		archiveArtifacts artifacts: 'cd spring/pom.xml', followSymlinks: false



                    // some block
                    def -Dsonar.projectKey=oken-cars-web-server3-bis
                    def -Dsonar.projectName='oken-cars-web-server3-bis'

-Dsonar.login=sqp_a2fddaf02fb3b61625770049704d123b89634c48

-Dsonar.url='http://10.10.10.20:9000/

pipeline {
    agent any
    tools {
        git 'git'
        maven 'mvn'
        jdk 'java-17.0.8.1'
    }
    stages{
        stage('Git Checkout') {
            steps{
                checkout changelog: false, poll: true, scm: scmGit(branches: [[name: '*/develop']], extensions: [cleanBeforeCheckout(), changelogToBranch(changelogBase(compareRemote: ' oken-cars-web', compareTarget: '*/develop'))], userRemoteConfigs: [[credentialsId: 'Jenkins_Access_Gitlab_Oken_user', url: 'http://10.10.10.212/oken-consulting/oken-cars-web.git']])
                git branch: 'develop', changelog: false, credentialsId: 'Jenkins_Access_Gitlab_Oken_user', poll: false, url: 'http://10.10.10.212/oken-consulting/oken-cars-web.git'
            }
        }
        stage('MVN Invoker') {
            steps{
                maven_invoker invokerBuildDir: 'target/it', reportsFilenamePattern: 'target/invoker-reports/BUILD*.xml'
            }
        }
        stage('Prepare Sonar Analysis Environment'){
            steps{
                withMaven(globalMavenSettingsConfig: '', jdk: 'java-17.0.8.1', maven: 'mvn', mavenSettingsConfig: '', mavenSettingsFilePath: 'cd sprintg/pom.xml', traceability: true) {
                    // some block
                }
                withSonarQubeEnv(credentialsId: 'Sonar-Token-oken-cars-web-server3-bis-Scan-Credentials', installationName: 'SonarQube-okenCarsWeb-03-Token-server3') {
                    sh "mvn clean verify sonar:sonar"
                }
            }
        }
        stage('Sonar Analysis'){
            steps{
                sh "mvn clean verify sonar:sonar"
                sh '''mvn sonar:sonar -Dsonar.url='http://10.10.10.20:9000/ -Dsonar.login=sqp_a2fddaf02fb3b61625770049704d123b89634c48'''
            }
        }
        stage('Transfer Oken Cars Gitlab repo to server3'){
            steps{
                sh "pwd && hostnamectl"
                sh "scp -r ./* oken@10.10.10.32:~/oken-cars-web/"
            }
        }
    }
}
